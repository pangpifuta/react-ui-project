var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

import React, { Component } from 'react';
import { findDOMNode } from 'react-dom';
import { createTextMaskInputElement } from 'text-mask-core';
import { createAutoCorrectedDatePipe, emailMask, createNumberMask } from 'text-mask-addons';
import { DropInput } from '../DropInput';
import { transformMaskedValue } from './utils';
import { createMinMaxInputPipe, maskedNumberValue } from './minMaxNumberPipe';

var MaskedInput = function (_Component) {
  _inherits(MaskedInput, _Component);

  function MaskedInput() {
    var _temp, _this, _ret;

    _classCallCheck(this, MaskedInput);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = _possibleConstructorReturn(this, _Component.call.apply(_Component, [this].concat(args))), _this), _this.onInput = function (event) {
      var onInput = _this.props.onInput;

      if (_this.textMaskInputElement) {
        _this.textMaskInputElement.update(event.target.value);
      }
      if (onInput) {
        onInput(event);
      }
    }, _temp), _possibleConstructorReturn(_this, _ret);
  }

  MaskedInput.prototype.initTextMask = function initTextMask() {
    var props = this.props,
        value = this.props.value;

    if (props.mask && this.inputControlRef) {
      this.textMaskInputElement = createTextMaskInputElement(_extends({
        inputElement: this.inputControlRef
      }, props));
      this.textMaskInputElement.update(value);
    }
  };

  MaskedInput.prototype.componentDidMount = function componentDidMount() {
    this.initTextMask();
  };

  MaskedInput.prototype.componentDidUpdate = function componentDidUpdate() {
    this.initTextMask();
  };

  MaskedInput.prototype.maskedValue = function maskedValue(value) {
    if (value === undefined) {
      return undefined;
    }
    var mask = this.props.mask;

    if (value) {
      var conformed = transformMaskedValue(value, mask, this.props);
      return conformed;
    }
    return value;
  };

  MaskedInput.prototype.render = function render() {
    var _this2 = this;

    var _props = this.props,
        defaultValue = _props.defaultValue,
        value = _props.value,
        mask = _props.mask,
        guide = _props.guide,
        showMask = _props.showMask,
        pipe = _props.pipe,
        placeholderChar = _props.placeholderChar,
        keepCharPositions = _props.keepCharPositions,
        onMaskedValue = _props.onMaskedValue,
        rest = _objectWithoutProperties(_props, ['defaultValue', 'value', 'mask', 'guide', 'showMask', 'pipe', 'placeholderChar', 'keepCharPositions', 'onMaskedValue']);

    return React.createElement(DropInput, _extends({
      ref: function ref(_ref) {
        _this2.inputControlRef = _ref && findDOMNode(_ref).getElementsByTagName('input')[0];
      },
      value: this.maskedValue(value),
      defaultValue: this.maskedValue(defaultValue),
      onInput: this.onInput
    }, rest));
  };

  return MaskedInput;
}(Component);

MaskedInput.defaultProps = {
  type: 'text',
  guide: true,
  showMask: false,
  placeholderChar: '\u2000'
};


var MaskedInputDoc = void 0;
if (process.env.NODE_ENV !== 'production') {
  MaskedInputDoc = require('./doc').default(MaskedInput); // eslint-disable-line global-require
}

var MaskedInputWrapper = MaskedInputDoc || MaskedInput;
MaskedInputWrapper.alphabetic = /[A-Z]/i;
MaskedInputWrapper.placeholderChars = {
  whitespace: '\u2000',
  underscore: '_'
};
MaskedInputWrapper.digit = /\d/;
MaskedInputWrapper.createAutoCorrectedDatePipe = createAutoCorrectedDatePipe;
MaskedInputWrapper.emailMask = emailMask;
MaskedInputWrapper.createNumberMask = createNumberMask;
MaskedInputWrapper.createMinMaxInputPipe = createMinMaxInputPipe;
MaskedInputWrapper.maskedNumberValue = maskedNumberValue;

export { MaskedInputWrapper as MaskedInput };