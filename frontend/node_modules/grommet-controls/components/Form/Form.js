'use strict';

exports.__esModule = true;
exports.Form = undefined;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _grommet = require('grommet');

var _DOM = require('grommet/utils/DOM');

var _object = require('grommet/utils/object');

var _FormState = require('./FormState');

var _StyledForm = require('./StyledForm');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var styledComponents = {
  form: _StyledForm.StyledForm
};

var Form = function (_Component) {
  _inherits(Form, _Component);

  function Form(props, context) {
    _classCallCheck(this, Form);

    var _this = _possibleConstructorReturn(this, _Component.call(this, props, context));

    _initialiseProps.call(_this);

    _this.config = {};
    var formState = new _FormState.FormState(_this.config, props.object, function () {
      var errors = _this.state.errors;

      if (errors) {
        _this.setState({ errors: formState.getErrors() });
      } else {
        if (_this.props.onValidForm) {
          _this.props.onValidForm();
        }
        _this.setState({ data: formState.get() });
      }
      if (_this.props.onInvalidForm) {
        _this.props.onInvalidForm(!formState.isValid());
      }
    });
    _this.state = {
      config: {}, errors: undefined, submitted: false, formState: formState, data: formState.get()
    };
    return _this;
  }

  Form.prototype.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {
    if (nextProps.object && JSON.stringify(nextProps.object) !== JSON.stringify(this.state.object)) {
      var newObject = (0, _object.deepMerge)(this.state.data, nextProps.object);
      this.state.formState.setObject(newObject);
      this.setState({ data: newObject });
    }
  };

  Form.prototype.componentDidMount = function componentDidMount() {
    var focusFirstChild = this.props.focusFirstChild;

    if (focusFirstChild) {
      var items = this.containerRef.getElementsByTagName('*');
      items = (0, _DOM.filterByFocusable)(items);
      if (items.length > 0) {
        setTimeout(function () {
          items[0].focus();
        }, 0);
      }
    }
    this.state.formState.updateFields(this.config);
  };

  Form.prototype.getChildContext = function getChildContext() {
    return {
      form: {
        attachToForm: this.attachToForm,
        detachFromForm: this.detachFromForm,
        getFieldValue: this.getFieldValue,
        getFieldErrors: this.getFieldErrors,
        onFieldChange: this.updateObject
      }
    };
  };

  Form.prototype.render = function render() {
    var _this2 = this;

    var _props = this.props,
        children = _props.children,
        a11yTitle = _props.a11yTitle,
        onSubmitError = _props.onSubmitError,
        onValidForm = _props.onValidForm,
        onInvalidForm = _props.onInvalidForm,
        onSubmit = _props.onSubmit,
        tag = _props.tag,
        rest = _objectWithoutProperties(_props, ['children', 'a11yTitle', 'onSubmitError', 'onValidForm', 'onInvalidForm', 'onSubmit', 'tag']);

    var StyledComponent = styledComponents[tag];
    if (!StyledComponent) {
      StyledComponent = _StyledForm.StyledForm.withComponent(tag);
      styledComponents[tag] = StyledComponent;
    }
    return _react2.default.createElement(
      StyledComponent,
      {
        onSubmit: this.onSubmit,
        'aria-label': a11yTitle
      },
      _react2.default.createElement(
        _grommet.Box,
        { direction: 'row' },
        _react2.default.createElement(
          _grommet.Box,
          rest,
          _react2.default.createElement(
            'div',
            { ref: function ref(_ref) {
                _this2.containerRef = _ref;
              } },
            children
          )
        )
      )
    );
  };

  return Form;
}(_react.Component);

Form.childContextTypes = {
  form: _propTypes2.default.object
};

var _initialiseProps = function _initialiseProps() {
  var _this3 = this;

  this.onSubmit = function (event) {
    var formState = _this3.state.formState;
    var _props2 = _this3.props,
        onSubmit = _props2.onSubmit,
        onSubmitError = _props2.onSubmitError;

    event.preventDefault();
    if (formState.isValid()) {
      _this3.setState({ errors: undefined });
      if (onSubmit) {
        onSubmit(formState.get());
      }
    } else {
      var errors = formState.getErrors();
      if (onSubmitError) {
        onSubmitError(errors);
      }
      _this3.setState({ errors: errors });
    }
  };

  this.updateObject = function (name, value, e) {
    _this3.state.data[name] = value;
    if (_this3.props.onChange) {
      if (typeof e.stopPropagation === 'function') {
        e.stopPropagation();
      }
      _this3.props.onChange(e);
    }
  };

  this.attachToForm = function (name, props) {
    var _extends2;

    _this3.config = _extends({}, _this3.config, (_extends2 = {}, _extends2[name] = props, _extends2));
  };

  this.detachFromForm = function (name) {
    delete _this3.config[name];
  };

  this.getFieldValue = function (name) {
    return _this3.state.data[name];
  };

  this.getFieldErrors = function (name) {
    return _this3.state.errors ? _this3.state.errors[name] : null;
  };
};

Form.defaultProps = {
  focusFirstChild: true,
  onChange: undefined,
  onSubmit: undefined,
  onSubmitError: undefined,
  onInvalidForm: undefined,
  onValidForm: undefined,
  object: {},
  tag: 'form',
  basis: 'medium'
};

var FormDoc = void 0;
if (process.env.NODE_ENV !== 'production') {
  FormDoc = require('./doc').default(Form); // eslint-disable-line global-require
}

var FormWrapper = FormDoc || Form;

exports.Form = FormWrapper;