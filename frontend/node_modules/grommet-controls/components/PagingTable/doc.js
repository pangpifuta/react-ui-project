'use strict';

exports.__esModule = true;

var _reactDesc = require('react-desc');

exports.default = function (Element) {
  var DocumentedElement = (0, _reactDesc.describe)(Element).description('A Grommet 2 table component with pagination, filtering, footer, child rows and grouping. Derived from https://github.com/react-tools/react-table. ').usage('\n    $ npm install grommet-controls\n\n    import { PagingTable } from \'grommet-controls\';\n\n    <PagingTable columns={...} data={...} />\n');

  DocumentedElement.propTypes = {
    decorations: _reactDesc.PropTypes.shape({
      table: _reactDesc.PropTypes.object.description('Table styling, all **`<Box />`** properties are valid.'),
      header: _reactDesc.PropTypes.object.description('Header cell styling, all **`<Box />`** properties are valid'),
      headerGroup: _reactDesc.PropTypes.object.description('Grouped columns header styling, all **`<Box />`** properties are valid.'),
      filter: _reactDesc.PropTypes.object.description('Filter row styling, all **`<Box />`** properties are valid.'),
      filterInput: _reactDesc.PropTypes.object.description('Filter input control styling, all **`<TextInput />`** properties are valid.'),
      body: _reactDesc.PropTypes.object.description('Body styling, all **`<Box />`** properties are valid.'),
      row: _reactDesc.PropTypes.object.description('Row of data styling, all **`<Box />`** properties are valid.'),
      rowOdd: _reactDesc.PropTypes.object.description('Odd row for striped styling, all **`<Box />`** properties are valid.'),
      rowEven: _reactDesc.PropTypes.object.description('Even row for striped styling, all **`<Box />`** properties are valid.'),
      cell: _reactDesc.PropTypes.object.description('Cell of data styling, all **`<Box />`** properties are valid.'),
      footer: _reactDesc.PropTypes.object.description('Footer row styling, all **`<Box />`** properties are valid.'),
      pagination: _reactDesc.PropTypes.object.description('Pagination box styling, all **`<Box />`** properties are valid.'),
      expander: _reactDesc.PropTypes.object.description('Expander button styling, all **`<Button />`** properties are valid, as well as icons OpenIcon and CloseIcon.')
    }).description('Visual settings of the various table elements. Where applicable, those settings can be overriden at the column level.'),
    columns: _reactDesc.PropTypes.arrayOf(_reactDesc.PropTypes.shape({
      Cell: _reactDesc.PropTypes.oneOfType([_reactDesc.PropTypes.element, _reactDesc.PropTypes.string, _reactDesc.PropTypes.func]).description('Used to render a standard cell, defaults to the accessed value.'),
      Header: _reactDesc.PropTypes.oneOfType([_reactDesc.PropTypes.element, _reactDesc.PropTypes.string, _reactDesc.PropTypes.func]).description('Used to render the header of a column or column group.'),
      Footer: _reactDesc.PropTypes.oneOfType([_reactDesc.PropTypes.element, _reactDesc.PropTypes.string, _reactDesc.PropTypes.func]),
      Aggregated: _reactDesc.PropTypes.oneOfType([_reactDesc.PropTypes.element, _reactDesc.PropTypes.string, _reactDesc.PropTypes.func]),
      Pivot: _reactDesc.PropTypes.oneOfType([_reactDesc.PropTypes.element, _reactDesc.PropTypes.string, _reactDesc.PropTypes.func]),
      PivotValue: _reactDesc.PropTypes.oneOfType([_reactDesc.PropTypes.element, _reactDesc.PropTypes.string, _reactDesc.PropTypes.func]),
      Expander: _reactDesc.PropTypes.oneOfType([_reactDesc.PropTypes.element, _reactDesc.PropTypes.string, _reactDesc.PropTypes.func]),
      Filter: _reactDesc.PropTypes.oneOfType([_reactDesc.PropTypes.element, _reactDesc.PropTypes.func]),

      // All Columns
      accessor: _reactDesc.PropTypes.string,
      decorations: _reactDesc.PropTypes.object,
      sortable: _reactDesc.PropTypes.bool, // use table default
      resizable: _reactDesc.PropTypes.bool, // use table default
      filterable: _reactDesc.PropTypes.bool, // use table default
      show: _reactDesc.PropTypes.bool,
      minWidth: _reactDesc.PropTypes.number,

      // Cells only
      getProps: _reactDesc.PropTypes.func,

      // Pivot only
      aggregate: _reactDesc.PropTypes.func,

      // Headers only
      getHeaderProps: _reactDesc.PropTypes.func,

      // Footers only
      getFooterProps: _reactDesc.PropTypes.object,
      filterMethod: _reactDesc.PropTypes.func,
      filterAll: _reactDesc.PropTypes.bool,
      sortMethod: _reactDesc.PropTypes.func
    })).isRequired.description('Array of column descriptors.'),
    data: _reactDesc.PropTypes.array.description('Array of data objects.').isRequired,
    defaultPageSize: _reactDesc.PropTypes.number.description('Default page size.').defaultValue(20),
    defaultSorted: _reactDesc.PropTypes.arrayOf(_reactDesc.PropTypes.shape({
      id: _reactDesc.PropTypes.string,
      desc: _reactDesc.PropTypes.bool
    })).description('Array of default sorted columns and their sort order.'),
    onFetchData: _reactDesc.PropTypes.func.description('If specified, a function responsible for loading the data.'),
    filterable: _reactDesc.PropTypes.bool.description('Wheter to display a filtering row.').defaultValue(false),
    loading: _reactDesc.PropTypes.bool.description('Wheter to display the loading indicator.').defaultValue(false),
    manual: _reactDesc.PropTypes.bool.description('If true, the data is sorted manually in the onFetchData function.').defaultValue(false),
    pages: _reactDesc.PropTypes.number.description('Number of total pages of data, when loading the data manually.'),
    pageSizeOptions: _reactDesc.PropTypes.arrayOf(_reactDesc.PropTypes.number.description('Page size')).description('Array of available page size options ([5, 10, 20, 25, 50, 100]).'),
    pivotBy: _reactDesc.PropTypes.arrayOf(_reactDesc.PropTypes.string).description('Array of columns to pivot (group) by.'),
    resizable: _reactDesc.PropTypes.bool.description('Wheter the columns can be resized.').defaultValue(true),
    showPagination: _reactDesc.PropTypes.bool.description('Wheter to display a paging row.').defaultValue(true),
    sortable: _reactDesc.PropTypes.bool.description('Wheter the table headers will allow sorting of the of the data.').defaultValue(true),
    SubComponent: _reactDesc.PropTypes.func.description('If specified, a function with (row as parameter) to render the expading row.').defaultValue(true)
  };

  return DocumentedElement;
};