'use strict';

exports.__esModule = true;

var _reactDesc = require('react-desc');

exports.default = function (Element) {
  var DocumentedElement = (0, _reactDesc.describe)(Element).description('Hierarchical collapsible menu.').usage('$ npm install grommet-controls\n\n    import { VerticalMenu } from \'grommet-controls\';\n\n    <VerticalMenu items={...} onSelect={...} />');

  DocumentedElement.propTypes = {
    items: _reactDesc.PropTypes.arrayOf(_reactDesc.PropTypes.shape({
      id: _reactDesc.PropTypes.string.description('Unique id'),
      label: _reactDesc.PropTypes.node.description('Label of the item'),
      expanded: _reactDesc.PropTypes.bool.description('Initial expanded state'),
      icon: _reactDesc.PropTypes.node.description('Icon in front of the label'),
      widget: _reactDesc.PropTypes.node.description('Widget or icon to place at the end of the item')
    })).description('Array of menu items.'),
    activeItem: _reactDesc.PropTypes.shape({
      id: _reactDesc.PropTypes.string
    }).description('Initially active menu item.'),
    buttonClass: _reactDesc.PropTypes.oneOfType([_reactDesc.PropTypes.string, _reactDesc.PropTypes.func]).description('Custom class to use for the button instead of RoutedButton.'),
    expandAll: _reactDesc.PropTypes.bool.description('If specified, will expand all items with chidren.'),
    onSelect: _reactDesc.PropTypes.func.description('Function that will be called when the user selects a menu item.'),
    search: _reactDesc.PropTypes.string.description('If specified, will filter the items by the search terms.')
  };

  return DocumentedElement;
};