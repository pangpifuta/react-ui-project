'use strict';

exports.__esModule = true;
// original validators https://github.com/christianalfoni/formsy-react/blob/master/src/validationRules.js

var isExisty = function isExisty(value) {
  return value !== null && value !== undefined;
};

var isEmpty = function isEmpty(value) {
  return value === '';
};

var isDefaultRequiredValue = function isDefaultRequiredValue(values, value) {
  return value === undefined || value === '';
};

var _required = function _required(values, value) {
  return isExisty(value) && !isEmpty(value);
};

var matchRegexp = function matchRegexp(values, value, regexp) {
  return !isExisty(value) || isEmpty(value) || regexp.test(value);
};

var _notEmptyString = function _notEmptyString(values, value) {
  return !isEmpty(value);
};

var isEmail = function isEmail(values, value) {
  return matchRegexp(values, value, /^[A-Z0-9._%+-]+@[A-Z0-9.-]+\.[A-Z]{2,4}$/i);
};

var isUrl = function isUrl(values, value) {
  return matchRegexp(values, value, /^(https?|s?ftp):\/\/(((([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!&',;=]|:)*@)?(((\d|[1-9]\d|1\d\d|2[0-4]\d|25[0-5])\.(\d|[1-9]\d|1\d\d|2[0-4]\d|25[0-5])\.(\d|[1-9]\d|1\d\d|2[0-4]\d|25[0-5])\.(\d|[1-9]\d|1\d\d|2[0-4]\d|25[0-5]))|((([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])*([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])))\.)+(([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])*([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])))\.?)(:\d*)?)(\/((([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!&',;=]|:|@)+(\/(([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!&',;=]|:|@)*)*)?)?(\?((([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!&',;=]|:|@)|[\uE000-\uF8FF]|\/|\?)*)?(#((([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!&',;=]|:|@)|\/|\?)*)?$/i);
};

var isTrue = function isTrue(values, value) {
  return value === true;
};

var isFalse = function isFalse(values, value) {
  return value === false;
};

var isNumeric = function isNumeric(values, value) {
  return typeof value === 'number' ? true : matchRegexp(values, value, /^[-+]?(?:\d*[.])?\d+$/);
};

var isAlpha = function isAlpha(values, value) {
  return matchRegexp(values, value, /^[A-Z]+$/i);
};

var isAlphanumeric = function isAlphanumeric(values, value) {
  return matchRegexp(values, value, /^[0-9A-Z]+$/i);
};

var isInt = function isInt(values, value) {
  return matchRegexp(values, value, /^(?:[-+]?(?:0|[1-9]\d*))$/);
};

var isFloat = function isFloat(values, value) {
  return matchRegexp(values, value, /^(?:[-+]?(?:\d+))?(?:\.\d*)?(?:[eE]?(?:\d+))?$/);
};

var isWords = function isWords(values, value) {
  return matchRegexp(values, value, /^[A-Z\s]+$/i);
};

var _startsWith = function _startsWith(str) {
  return function (values, value) {
    return !isEmpty(value) && value.startsWith(str);
  };
};

var isLength = function isLength(length) {
  return function (values, value) {
    return !isExisty(value) || isEmpty(value) || value.length === length;
  };
};

var _equals = function _equals(eql) {
  return function (values, value) {
    return !isExisty(value) || isEmpty(value) || value === eql;
  };
};
var _equalsField = function _equalsField(field) {
  return function (values, value) {
    return value === values[field];
  };
};
var _maxLength = function _maxLength(length) {
  return function (values, value) {
    return !isExisty(value) || value.length <= length;
  };
};
var _minLength = function _minLength(length) {
  return function (values, value) {
    return !isExisty(value) || isEmpty(value) || value.length >= length;
  };
};

var isBigger = function isBigger(number) {
  return function (values, value) {
    return !isExisty(value) || value > number;
  };
};

var isSmaller = function isSmaller(number) {
  return function (values, value) {
    return !isExisty(value) || value < number;
  };
};

var isBiggerOrEqual = function isBiggerOrEqual(number) {
  return function (values, value) {
    return !isExisty(value) || value >= number;
  };
};

var isSmallerOrEqual = function isSmallerOrEqual(number) {
  return function (values, value) {
    return !isExisty(value) || value <= number;
  };
};

var invalidFieldMessage = function invalidFieldMessage(label) {
  return label + ' is not valid';
};
var requiredFieldMessage = function requiredFieldMessage(label) {
  return label + ' is required';
};
var canNotBeEmptyFieldMessage = function canNotBeEmptyFieldMessage(label) {
  return label + ' can not be empty';
};

var ruleWrapper = function ruleWrapper(rule, customMessage, defaultMessage) {
  return function (values, value) {
    if (rule(values, value)) {
      return undefined;
    }
    return customMessage || defaultMessage;
  };
};

var validators = {
  email: function email(message) {
    return ruleWrapper(isEmail, message, invalidFieldMessage);
  },
  url: function url(message) {
    return ruleWrapper(isUrl, message, invalidFieldMessage);
  },
  required: function required(message) {
    return ruleWrapper(_required, message, requiredFieldMessage);
  },
  defaultRequired: function defaultRequired(message) {
    return ruleWrapper(isDefaultRequiredValue, message, requiredFieldMessage);
  },
  notEmptyString: function notEmptyString(message) {
    return ruleWrapper(_notEmptyString, message, canNotBeEmptyFieldMessage);
  },
  numeric: function numeric(message) {
    return ruleWrapper(isNumeric, message, function (label) {
      return label + ' must be a numeric value';
    });
  },
  alpha: function alpha(message) {
    return ruleWrapper(isAlpha, message, function (label) {
      return label + ' must be alphabetic';
    });
  },
  alphaNumeric: function alphaNumeric(message) {
    return ruleWrapper(isAlphanumeric, message, function (label) {
      return label + ' must be alphanumeric';
    });
  },
  int: function int(message) {
    return ruleWrapper(isInt, message, function (label) {
      return label + ' must be an integer';
    });
  },
  float: function float(message) {
    return ruleWrapper(isFloat, message, function (label) {
      return label + ' must be a number';
    });
  },
  words: function words(message) {
    return ruleWrapper(isWords, message, function (label) {
      return label + ' must be a collection of words';
    });
  },
  length: function length(_length, message) {
    return ruleWrapper(isLength(_length), message, function (label) {
      return label + ' must be ' + _length + ' characters long';
    });
  },
  minLength: function minLength(length, message) {
    return ruleWrapper(_minLength(length), message, function (label) {
      return label + ' must be at least ' + length + ' characters long';
    });
  },
  maxLength: function maxLength(length, message) {
    return ruleWrapper(_maxLength(length), message, function (label) {
      return label + ' must be up to ' + length + ' characters long';
    });
  },
  equals: function equals(value, message) {
    return ruleWrapper(_equals(value), message, function (label) {
      return label + ' must be equal to ' + value;
    });
  },
  equalsField: function equalsField(field, fieldLabel, message) {
    return ruleWrapper(_equalsField(field), message, function (label) {
      return label + ' does not match ' + (fieldLabel || field);
    });
  },
  True: function True(message) {
    return ruleWrapper(isTrue, message, function (label) {
      return label + ' must be True';
    });
  },
  False: function False(message) {
    return ruleWrapper(isFalse, message, function (label) {
      return label + ' must be False';
    });
  },
  bigger: function bigger(value, message) {
    return ruleWrapper(isBigger(value), message, function (label) {
      return label + ' must be bigger than ' + value;
    });
  },
  biggerOrEqual: function biggerOrEqual(value, message) {
    return ruleWrapper(isBiggerOrEqual(value), message, function (label) {
      return label + ' must be bigger or eqial to ' + value;
    });
  },
  smaller: function smaller(value, message) {
    return ruleWrapper(isSmaller(value), message, function (label) {
      return label + ' must be smaller than ' + value;
    });
  },
  smallerOrEqual: function smallerOrEqual(value, message) {
    return ruleWrapper(isSmallerOrEqual(value), message, function (label) {
      return label + ' must be smaller or equal to ' + value;
    });
  },
  startsWith: function startsWith(value, message) {
    return ruleWrapper(_startsWith(value), message, function (label) {
      return label + ' must start with ' + value;
    });
  }
};
exports.validators = validators;