'use strict';

exports.__esModule = true;
exports.transformMaskedValue = undefined;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _textMaskCore = require('text-mask-core');

var strCaretTrap = '[]';

var processCaretTraps = function processCaretTraps(mask) {
  var indexes = [];

  var indexOfCaretTrap = void 0;
  while (indexOfCaretTrap = mask.indexOf(strCaretTrap), indexOfCaretTrap !== -1) {
    // eslint-disable-line
    indexes.push(indexOfCaretTrap);
    mask.splice(indexOfCaretTrap, 1);
  }
  return mask;
};

// eslint-disable-next-line import/prefer-default-export
var transformMaskedValue = exports.transformMaskedValue = function transformMaskedValue(value, providedMask) {
  var props = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

  if (!providedMask) {
    return value;
  }
  var pipe = props.pipe;

  var safeValue = void 0;
  if (value === undefined || value === null) {
    safeValue = '';
  } else {
    safeValue = value.toString();
  }
  var mask = void 0;
  if ((typeof providedMask === 'undefined' ? 'undefined' : _typeof(providedMask)) === 'object' && providedMask.pipe !== undefined && providedMask.mask !== undefined) {
    // eslint-disable-next-line no-param-reassign
    providedMask = providedMask.mask;
    var _providedMask = providedMask;
    pipe = _providedMask.pipe;
  }
  if (typeof providedMask === 'function') {
    mask = providedMask(safeValue, _extends({}, props, { pipe: pipe }));

    // disable masking if `mask` is `false`
    if (mask === false) {
      return safeValue;
    }
    // The processed mask is what we're interested in
    mask = processCaretTraps(mask);
    // If the `providedMask` is not a function, we just use it as-is.
  } else {
    mask = providedMask;
  }
  var conformedValue = value;
  var guide = props.guide,
      placeholderChar = props.placeholderChar,
      placeholder = props.placeholder,
      currentCaretPosition = props.currentCaretPosition,
      showMask = props.showMask,
      keepCharPositions = props.keepCharPositions;


  var conformToMaskConfig = {
    previousPlaceholder: placeholder,
    guide: guide,
    placeholderChar: placeholderChar,
    pipe: pipe,
    currentCaretPosition: currentCaretPosition,
    keepCharPositions: keepCharPositions
  };
  var conformed = (0, _textMaskCore.conformToMask)(safeValue, mask, conformToMaskConfig);
  if (conformed) {
    conformedValue = conformed.conformedValue;
  }
  if (typeof pipe === 'function') {
    var pipeResults = pipe(conformedValue, _extends({ rawValue: safeValue }, conformToMaskConfig));
    if (typeof pipeResults === 'string') {
      conformedValue = pipeResults;
    }
  }
  if (conformedValue === placeholder) {
    conformedValue = showMask ? placeholder : '';
  }
  return conformedValue;
};